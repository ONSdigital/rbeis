:py:mod:`rbeis`
===============

.. py:module:: rbeis

.. autoapi-nested-parse::

   RBEIS is a method originally developed for imputing categorical data in relatively small social surveys with the intention of minimising conditional imputation variance. It is derived from CANCEIS, which is better suited to large datasets such as the Census.  This implementation of RBEIS works with [Pandas](https://pandas.pydata.org) DataFrames.


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   pandas/index.rst
   spark/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   rbeis.RBEISDistanceFunction




.. py:exception:: RBEISInputException

   Bases: :py:obj:`Exception`

   Exception raised in the case of faulty input to `impute` that is not covered by a TypeError.
.. py:exception:: RBEISInputWarning

   Bases: :py:obj:`UserWarning`

   Warning raised in the case of redundant input to `impute`.
.. py:class:: RBEISDistanceFunction(df, custom_map=None, threshold=None, weight=1.0)

   Callable object encapsulating one of the six RBEIS distance functions, its
   threshold value (where appropriate), any pairs of values to be overridden
   (for DFs 4-6), and a weight by which to scale its result.
   
   PLEASE NOTE that, in rbeis._calc_distances, the argument order is assumed to
   be (record, IGroup).  This is especially important when defining custom maps
   for DFs 4-6, which *do not* assume that f(x,y) == f(y,x).
   .. py:attribute:: f
      
   
      
   .. py:attribute:: weight
      :annotation: = 1.0
   
      
   .. py:method:: _df1(x, y)
   
      _df1(x, y)
      
      x ('a): A data point for comparison
      y ('a): A data point for comparison
      
      Distance Function 1: return 1 if x and y are not equal, otherwise 0.
      This function (and its derivative, DF4) can be used with any data types
      that are comparable using =.
      
      e.g. _df1(2, 2) => 0
           _df1(2, 4) => 1
   .. py:method:: _df2(x, y, m=None)
   
      _df2(x, y, m)
      
      x (numeric): A data point for comparison
      y (numeric): A data point for comparison
      m (numeric): A threshold value
      
      Distance Function 2: return 1 if the difference between x and y is
      greater than the threshold m, otherwise 0.  This function (and its
      derivative, DF5) may only be used with numeric data.
      
      e.g. _df2(2, 2, 2) => 0
           _df2(2, 3, 2) => 0
           _df2(2, 8, 2) => 1
   .. py:method:: _df3(x, y, m=None)
   
      _df3(x, y, m)
      
      x (numeric): A data point for comparison
      y (numeric): A data point for comparison
      m (numeric): A threshold value
      
      Distance Function 3: return 1 if the difference between x and y is
      greater than the threshold m, otherwise return the difference between x
      and y, divided by m + 1.  This function (and its derivative, DF6) may
      only be used with numeric data.
      
      e.g. _df3(2, 2, 3) => 0
           _df3(2, 3, 3) => 0.25
           _df3(2, 8, 3) => 1
